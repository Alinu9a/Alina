/*
4. Afișarea numărului de biți pe 1 din număr
5. Afișarea numărului de biți pe 0 din număr
6. Afișarea poziției a primului bit (cel mai din stânga) cu valoarea 1 a numărului în cazul în
care numărul este pozitiv
7. Afișarea numărului de octeți necesari pentru reprezentarea numărului, în cazul în care
numărul este pozitiv.
*/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#define  _CRT_SECURE_NO_WARNINGS
int main()
{
	int n = 100000;
	int i;
	int count;
	int pos=0;
	count = 0;

	for (i = 31; i >= 0; i--)
	{
		if ((n >> i) & 1)
			count++;
	}
	printf("Biti pe unu sunt: %d\n", count);
	printf("Biti pe zero sunt: %d\n", 32 - count);
	// Gasim pozitia primului 1 de la stanga
	if (!((n >> 31) & 1))
	{
		for (i = 31; i >= 0; i--)
		{
			if ((n >> i) & 1)
			{
				pos=i;
				printf("Pozitia este: %d\n", i);
				break;
			}
		}
	}
	
	// Determinam numarul de octeti
	if(pos>=0 && pos<=7)
		printf("Octeti necesari: 1\n");
	if(pos>=8 && pos<=15)
		printf("Octeti necesari: 2\n");
	if(pos>=16 && pos<=23)
		printf("Octeti necesari: 3\n");
	if(pos>=24 && pos<=31)
		printf("Octeti necesari: 4\n");
	
	return 0;
}
